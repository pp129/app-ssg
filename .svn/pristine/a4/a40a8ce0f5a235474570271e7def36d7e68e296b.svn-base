import { Injectable } from "@angular/core";
import {
	Http,
	Response,
	RequestOptions,
	Headers,
	URLSearchParams
} from "@angular/http";
import { Observable } from "rxjs/Observable";
import "rxjs/add/operator/catch";
import "rxjs/add/operator/map";

/*
  Generated class for the RestApiProvider provider.
  See https://angular.io/docs/ts/latest/guide/dependency-injection.html
  for more info on providers and Angular DI.
*/
@Injectable()
export class RestApiProvider {
	//private apiUrl = 'https://reqres.in/api/';
	//private apiUrl = "https://www.easy-mock.com/mock/5ac06d71a5bbc64b284023ec/ssg/";
	headersForm: any;
	//options: any;
	constructor(public http: Http) {
		//console.log("Hello RestApiProvider Provider");
		this.headersForm = new Headers({
			"Content-Type": "application/x-www-form-urlencoded;charset=UTF-8"
		});
		// this.options = new RequestOptions({ headers: this.headers });
	}

	getUsers(apiUrl, page, per_page): Observable<string[]> {
		return this.http
			.get(
				apiUrl +
					"/pageVoList?pageindex=" +
					page +
					"&pagesize=" +
					per_page
			)
			.map(this.extractData)
			.catch(this.handleError);
	}

	logins(apiUrl, params): Observable<any> {
		let paramSerialize: URLSearchParams = this.serialize(params);
		return this.http
			.post(apiUrl, paramSerialize, { headers: this.headersForm })
			.map(this.extractData)
			.catch(this.handleError);
	}

	serialize(obj: any): URLSearchParams {
		let params: URLSearchParams = new URLSearchParams();

		for (var key in obj) {
			if (obj.hasOwnProperty(key)) {
				var element = obj[key];
				params.set(key, element);
			}
		}
		return params;
	}

	private extractData(res: Response) {
		console.log(res);
		let body = res.json();
		return body || {};
	}

	private handleError(error: Response | any) {
		let errMsg: string;
		if (error instanceof Response) {
			const body = error.json() || "";
			const err = body.error || JSON.stringify(body);
			errMsg = `${error.status} - ${error.statusText || ""} ${err}`;
		} else {
			errMsg = error.message ? error.message : error.toString();
		}
		console.error(errMsg);
		return Observable.throw(errMsg);
	}
}
